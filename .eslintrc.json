{
  "env": {
    "browser": false,
    "es2021": true,
    "node": true,
    "jest": true
  },
  "extends": ["eslint:recommended"],
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "rules": {
    "indent": ["error", 2],
    "linebreak-style": ["off"],
    "quotes": ["error", "single", { "avoidEscape": true, "allowTemplateLiterals": true }],
    "semi": ["error", "always"],
    "no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "no-console": "off",
    "prefer-const": "error",
    "no-var": "error"
  },
  "overrides": [
    {
      "files": ["*.ts"],
      "parser": "@typescript-eslint/parser",
      "plugins": ["@typescript-eslint", "unused-imports"],
      "rules": {
        "no-unused-vars": ["error"],
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": ["error"]
      }
    },
    {
      "files": ["test/**/*.ts"],
      "env": {
        "jest": true
      },
      "parser": "@typescript-eslint/parser",
      "plugins": ["@typescript-eslint", "unused-imports"],
      "rules": {
        "no-unused-vars": ["error"],
        "unused-imports/no-unused-imports": "error",
        "unused-imports/no-unused-vars": ["error"]
      }
    },
    {
      /*
This rule enforces the CDK best practice to configure via properties and methods rather than reading environment variables. Environment lookups inside constructs or stacks are an anti-pattern; accept a props object instead. The rule targets infrastructure (CDK) code only, so exclude Lambda runtime code and test files.
      */
      "files": ["**/*.ts"],
      "excludedFiles": ["bin/app.ts", "test/**/*.ts", "lambda/**/*.ts"],
      "rules": {
        "no-restricted-properties": [
          "error",
          {
            "object": "process",
            "property": "env",
            "message": "Environment variable lookup is only allowed in bin/app.ts"
          }
        ]
      }
    }
  ]
}
